@using Dnet.Blazor.Components.AdminDashboard.Infrastructure.Services
@using Dnet.Blazor.Infrastructure.Models
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web

@inject IJSRuntime JSRuntime

<div class="mat-tab-header @(_showPaginationControls ? "mat-tab-header-pagination-controls-enabled" : null)" style="border-bottom:@_borderBottom">
    <div class="mat-tab-header-pagination mat-tab-header-pagination-before" @onclick="() => HandlePaginatorClick(ScrollDirection.Before)">
        <div class="mat-tab-header-pagination-chevron"></div>
    </div>

    <div @ref="_tabLabelContainer" class="mat-tab-label-container">
        <div @ref="_tabList" class="mat-tab-list" style="transform: translateX(@_transformX)">
            <div class="mat-tab-labels">
                @ChildContent
            </div>
            <mat-ink-bar></mat-ink-bar>
        </div>
    </div>

    <div class="mat-tab-header-pagination mat-tab-header-pagination-after" @onclick="() => HandlePaginatorClick(ScrollDirection.After)">
        <div class="mat-tab-header-pagination-chevron"></div>
    </div>
</div>


@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool TabHeaderBorder { get; set; }

    [Parameter]
    public DnetTab SelectedTab { get; set; }

    private string _borderBottom { get; set; }

    private ElementReference _tabLabelContainer { get; set; }

    private ElementReference _tabList { get; set; }

    private bool _showPaginationControls { get; set; }

    private double _tabListScrollWidth { get; set; }

    private ClientRectValues _tabLabelContainerBoundingClientRect { get; set; }

    private double _scrollDistance { get; set; } = 0;

    private string _transformX { get; set; } = "0px";


    protected override void OnInitialized()
    {
        _borderBottom = TabHeaderBorder ? "1px solid rgba(0,0,0,.12)" : "none";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _tabListScrollWidth = await DnetInterop.GetElementScrollWidth(JSRuntime, _tabList);

            _tabLabelContainerBoundingClientRect = await DnetInterop.GetBoundingClientRect(JSRuntime, _tabLabelContainer);

            _showPaginationControls = _tabListScrollWidth > _tabLabelContainerBoundingClientRect.Width;

            StateHasChanged();
        }
    }

    private async Task HandlePaginatorClick(ScrollDirection direction)
    {
        await ScrollHeader(direction);
    }

    private async Task ScrollHeader(ScrollDirection direction)
    {
        var viewLength = await DnetInterop.GetBoundingClientRect(JSRuntime, _tabLabelContainer);

        // Move the scroll distance one-third the length of the tab list's viewport.
        var scrollAmount = (direction == ScrollDirection.Before ? -1 : 1) * viewLength.Width / 3;

        await ScrollTo(_scrollDistance + scrollAmount);
    }

    private async Task ScrollTo(double position)
    {
        var maxScrollDistance = await GetMaxScrollDistance();

        _scrollDistance = Math.Max(0, Math.Min(maxScrollDistance, position));

        _transformX = $"-{Convert.ToInt32(_scrollDistance)}px";

        StateHasChanged();
    }

    private async Task<double> GetMaxScrollDistance()
    {
        var lengthOfTabList = await DnetInterop.GetElementScrollWidth(JSRuntime, _tabList);

        var viewLength = await DnetInterop.GetBoundingClientRect(JSRuntime, _tabLabelContainer);

        return lengthOfTabList - Convert.ToInt32(viewLength.Width);
    }

    private async Task ScrollToLabel(int labelIndex)
    {
        if (SelectedTab == null) return;

        // The view length is the visible width of the tab labels.
        var viewLength = await DnetInterop.GetBoundingClientRect(JSRuntime, _tabLabelContainer);

        var tabLength = await DnetInterop.GetBoundingClientRect(JSRuntime, SelectedTab.TabElementReference);

        var offsetLeft = Convert.ToInt32(tabLength.Left);
        var offsetWidth = Convert.ToInt32(tabLength.Width);

        int labelBeforePos;
        int labelAfterPos;

        labelBeforePos = offsetLeft;
        labelAfterPos = labelBeforePos + offsetWidth;

        var beforeVisiblePos = _scrollDistance;
        var afterVisiblePos = _scrollDistance + viewLength.Width;

        if (labelBeforePos < beforeVisiblePos)
        {
            // Scroll header to move label to the before direction
            _scrollDistance -= beforeVisiblePos - labelBeforePos + 60;
        }
        else if (labelAfterPos > afterVisiblePos)
        {
            // Scroll header to move label to the after direction
            _scrollDistance += labelAfterPos - afterVisiblePos + 60;
        }
    }

    enum ScrollDirection
    {
        Before = 1,
        After
    }
}
