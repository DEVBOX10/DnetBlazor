@page "/Select"

@using System.ComponentModel.DataAnnotations
@using Dnet.App.Shared.Infrastructure.Entities
@using Dnet.App.Shared.Infrastructure.Services
@using Dnet.App.Shared.Shared.CustomComponents
@using Dnet.Blazor.Components.Select
@using Dnet.Blazor.Components.Checkbox
@using System.Drawing
@using Dnet.Blazor.Components.FormField
@using System.Net.Http
@using System.Net.Http.Json
@using System.ComponentModel

@inject HttpClient HttpClient
@inject IHttpClientFactory ClientFactory
@inject IApplicationServiceService ApplicationServiceService

<div class="container-fluid" style="padding-top: 10px;">
    <div class="d-flex dnet-m-l-30 dnet-m-t-20">
        <span class="dnet-m-r-10  dnet-app-comp-name">Select</span>
    </div>

    <div class="dnet-m-l-30 dnet-m-t-30">
        <EditForm Model="@_formData">
            <DataAnnotationsValidator />
            <div style="display: flex; flex-direction: column">
                <div style="display:flex;align-items: center;flex-direction: row;justify-content:space-between;width: 350px;">
                    <DnetSelect Value="@_formData.Name"
                                ValueChanged="@((string e) => MyValueChangeHandler(e))"
                                ValueExpression="@( () => _formData.Name )"
                                Items="_items"
                                TItem="Person"
                                DisplayValueConverter="(value) => (value.Name)"
                                OnItemSelected="ItemSelected"
                                InputTextToUpper="true"
                                PlaceHolder="Name"
                                Label="Name"
                                Appearance="_appearance">
                        <HintContent>You can add the country prefix</HintContent>
                        <ErrorContent>
                            <ValidationMessage For="@(() => _formData.Name)" />
                        </ErrorContent>
                        <SufixContent>
                            <div class="dnet-app-icon-wrapper">
                                <span class="dnet-app-icon dnet-app-formfield-headphones"></span>
                            </div>
                        </SufixContent>
                    </DnetSelect>
                </div>
                <div style="display: flex;align-items: center;">
                    <span class="dnet-m-r-10" style="font-size:0.875rem">Value selected:</span>
                    <span>@_formData.Name</span>
                </div>
            </div>
        </EditForm>
    </div>
    <div class="dnet-m-l-30 dnet-m-t-30">
        <EditForm Model="@_formData1">
            <DataAnnotationsValidator />
            <div style="display: flex; flex-direction: column">
                <div style="display:flex;align-items: center;flex-direction: row;justify-content:space-between;width: 350px;">
                    <DnetSelect Value="@_formData1.Name"
                                ValueChanged="@((string e) => MyValueChangeHandler(e))"
                                ValueExpression="@( () => _formData1.Name )"
                                Items="_items"
                                TItem="Person"
                                DisplayValueConverter="(value) => (value.Name)"
                                OnItemSelected="ItemSelected"
                                OnSelectionChanged="SelectionChanged"
                                InputTextToUpper="true"
                                PlaceHolder="Name"
                                Label="Name"
                                Appearance="_appearance"
                                MultiSelect="true">
                        <HintContent>You can add the country prefix</HintContent>
                        <ErrorContent>
                            <ValidationMessage For="@(() => _formData1.Name)" />
                        </ErrorContent>
                        <PrefixContent>
                            <div class="dnet-app-icon-wrapper">
                                <span class="dnet-app-icon dnet-app-formfield-headphones"></span>
                            </div>
                        </PrefixContent>
                    </DnetSelect>
                </div>
                <div style="display: flex;align-items: center;">
                    <span class="dnet-m-r-10" style="font-size:0.875rem">Value selected:</span>
                    <span>@multiValue</span>
                </div>
            </div>
        </EditForm>
    </div>
    <div class="dnet-m-l-30 dnet-m-t-50" style="width: 350px;">
        <div class="dnet-m-b-10">Nested selects</div>
        <EditForm EditContext="@_editContext" style="display: flex;flex-direction:column">
            <DataAnnotationsValidator />
            <DnetSelect Value="@_right.ApiResourceName"
                        ValueChanged="@((string e) => ApiResourceChangeHandler(e))"
                        ValueExpression="@( () => _right.ApiResourceName)"
                        Items="_apiResources"
                        TItem="ApiResourceDto"
                        DisplayValueConverter="(value) => (value.Name)"
                        OnItemSelected="ApiResourceItemSelected"
                        InputTextToUpper="true"
                        PlaceHolder="Api Resource"
                        Label="Api Resource"
                        Appearance="Appearance.Fill">
                <ErrorContent>
                    <ValidationMessage For="@(() => _right.ApiResourceName)" />
                </ErrorContent>
            </DnetSelect>
            <DnetSelect Value="@_right.ResourceType"
                        ValueChanged="@((string e) => ApiResourceObjectChangeHandler(e))"
                        ValueExpression="@( () => _right.ResourceType)"
                        Items="_apiResourceObjects"
                        TItem="ApiResourceObjectDto"
                        DisplayValueConverter="(value) => (value.Name)"
                        OnItemSelected="ApiResourceObjectItemSelected"
                        InputTextToUpper="true"
                        PlaceHolder="ResourceType"
                        Label="ResourceType"
                        Appearance="Appearance.Fill"
                        @ref="_apiResourceObjectReference">
                <ErrorContent>
                    <ValidationMessage For="@(() => _right.ResourceType)" />
                </ErrorContent>
            </DnetSelect>
        </EditForm>
    </div>
</div>


@code {

    private List<Person> _items = new();

    private Person _formData = new();

    private Person _formData1 = new();

    private EditContext? _editContext;

    private bool _formInvalid = true;

    private ValidationMessageStore? messageStore;

    private RightDto _right { get; set; } = new();

    private List<ApiResourceDto> _apiResources = new();

    private List<ApiResourceObjectDto> _apiResourceObjects { get; set; } = new();

    private List<ApiResourceObjectDto> _apiResourceObjectsFromDb { get; set; } = new();

    private Appearance _appearance { get; set; } = Appearance.Fill;

    private string multiValue { get; set; }

    private DnetSelect<ApiResourceObjectDto> _apiResourceObjectReference;


    protected override async Task OnInitializedAsync()
    {
        _items = await GetPersons();

        _apiResources = new List<ApiResourceDto>()
        {
            new()
            {
                Id = 1,
                Name = "APi_1"
            },
             new()
            {
                Id = 2,
                Name = "APi_2"
            }
        };

        _apiResourceObjectsFromDb = new List<ApiResourceObjectDto>()
        {
            new()
            {
                ApiResourceObjectId = 1,
                Name = "ApiResourceObject1_1",
                ApiResourceId = 1
            },
             new()
            {
                ApiResourceObjectId = 2,
                Name = "ApiResourceObject1_1",
                ApiResourceId = 1
            },
            new()
            {
                ApiResourceObjectId = 3,
                Name = "ApiResourceObject2_1",
                ApiResourceId = 2
            },
             new()
            {
                ApiResourceObjectId = 4,
                Name = "ApiResourceObject2_1",
                ApiResourceId = 2
            }
        };

        _editContext = new EditContext(_right);

        _editContext.OnFieldChanged += (data, eventArgs) =>
        {
            _formInvalid = !_editContext.Validate();
            StateHasChanged();
        };

        _editContext.OnValidationRequested += (data, eventArgs) =>
        {
            messageStore?.Clear();

            StateHasChanged();
        };
    }

    private async Task<List<Person>> GetPersons()
    {
        var dataPersons = await ApplicationServiceService.GetPersons();

        return dataPersons;
    }

    private void ItemSelected(Person item)
    {
    }

    private void SelectionChanged(List<Person> items)
    {
        multiValue = String.Join("-", items.Select(p => p.Name).ToList());
    }

    private void MyValueChangeHandler(string item)
    {
        _formData.Name = item;
    }

    private void ApiResourceItemSelected(ApiResourceDto item)
    {
        _right.ApiResourceId = item.Id;

        _apiResourceObjects = new();

        _apiResourceObjects = _apiResourceObjectsFromDb.Where(p => p.ApiResourceId == item.Id).Select(p => p).ToList();

        _apiResourceObjectReference.RefreshData(_apiResourceObjects);
    }

    private void ApiResourceChangeHandler(string item)
    {
        _right.ApiResourceName = item;
    }

    private void ApiResourceObjectItemSelected(ApiResourceObjectDto item)
    {
        _right.ApiResourceObjectId = item.ApiResourceObjectId;
    }

    private void ApiResourceObjectChangeHandler(string item)
    {
        _right.ResourceType = item;
    }

    public class ApiResourceDto
    {
        public int Id { get; set; }

        [Required]
        public string Name { get; set; }
    }

    public class ApiResourceObjectDto
    {
        public int ApiResourceObjectId { get; set; }

        [Required]
        public string Name { get; set; }

        public int ApiResourceId { get; set; }
    }

    public class RightDto
    {
        public int ApplicationRightId { get; set; }

        public int ApiResourceId { get; set; }

        [Required]
        public string ApiResourceName { get; set; }

        [Required]
        public string Name { get; set; }

        [Required]
        public string ResourceType { get; set; }

        public int? ApiResourceObjectId { get; set; }
    }

}



