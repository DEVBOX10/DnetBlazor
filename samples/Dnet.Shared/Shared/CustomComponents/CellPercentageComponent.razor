@using System.Globalization
@using System.Text.RegularExpressions
@using Dnet.App.Shared.Infrastructure.Entities
@using Dnet.Blazor.Components.Grid.Infrastructure.Entities

<div style="display: flex; flex-direction: column; width: 100%">
    <div style="display: flex;flex-direction: row;justify-content: space-between;height: 15px;align-items: center;font-size: 0.675rem;">
        <span>
            0
        </span>
        <span>
            5000
        </span>
    </div>
    <div style="display: flex;height: 15px;font-size: 0.675rem;align-items: center;">
        <span style="width: @GetBarWidth(CellParams.RowData.Balance);
                     background-color: @GetBarColor(CellParams.RowData.Balance);
                     height: 100%;
                     color: #FFFFFF; 
                     display: flex; 
                     justify-content: flex-end; 
                     align-items: center; 
                     padding-right: 5px;">
            @CellParams.RowData.Balance
        </span>
    </div>
</div>

@code {

    [Parameter]
    public CellParams<Person> CellParams { get; set; }

    private string GetBarColor(string balance)
    {
        string bkColor = "red";

        decimal value = 0;

        decimal.TryParse(balance.Remove(0, 1), NumberStyles.Currency | NumberStyles.AllowThousands | NumberStyles.Float, CultureInfo.InvariantCulture, out value);

        if (value >= 0 && value <= 1500) bkColor = "red";

        if (value >= 1500 && value <= 2500) bkColor = "orange";

        if (value >= 2500 && value <= 5000) bkColor = "green";

        return bkColor;
    }

    private string GetBarWidth(string balance)
    {
        decimal value = 0;

        decimal.TryParse(balance.Remove(0, 1), NumberStyles.Currency | NumberStyles.AllowThousands | NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture, out value);

        var barWidth = (250 * value) / 5000;

        var width = $"{barWidth.ToString(CultureInfo.InvariantCulture)}px";

        return width;
    }

}
