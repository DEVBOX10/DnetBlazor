@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Diagnostics.CodeAnalysis
@using Dnet.Blazor.Infrastructure.Services.CssBuilder

@inject IJSRuntime JSRuntime

<div class="@_formFieldClass">
    <div class="mat-form-field-wrapper">
        <div class="mat-form-field-flex" @ref="OverlayOrigin">
            @if (PrefixContent != null)
            {
                <div class="mat-form-field-prefix">
                    @PrefixContent
                </div>

            }
            <div class="mat-form-field-infix">
                @ChildContent

                <span class="mat-form-field-label-wrapper">
                    <label class="@_formFieldLabelClass">
                        <span class="mat-label">@Label</span>
                    </label>
                </span>
            </div>
            @if (SufixContent != null)
            {
                <div class="mat-form-field-suffix">
                    @SufixContent
                </div>
            }
            @if (ClearButtonContent != null)
            {
                <div class="mat-form-field-suffix">
                    @ClearButtonContent
                </div>
            }
        </div>
        <div class="mat-form-field-underline">
            <div class="mat-form-field-ripple"></div>
        </div>
        <div class="mat-form-field-subscript-wrapper">
            @if (HasErrors)
            {
                <div class="mat-error">
                    @ErrorContent
                </div>
            }
            else
            {
                <div class="mat-form-field-hint-wrapper">
                    <div class="mat-hint">
                        @HintContent
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<DnetFormField> OnFormInitialized { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public RenderFragment PrefixContent { get; set; }

    [Parameter]
    public RenderFragment SufixContent { get; set; }

    [Parameter]
    public RenderFragment HintContent { get; set; }

    [Parameter]
    public RenderFragment ErrorContent { get; set; }

    [Parameter]
    public RenderFragment ClearButtonContent { get; set; }

    [Parameter]
    public string CurrentValue { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool Empty { get; set; }

    [Parameter]
    public bool HasErrors { get; set; }

    [Parameter]
    public string PlaceHolder { get; set; }

    [Parameter]
    public string Hint { get; set; }

    [Parameter]
    public Appearance Appearance { get; set; }

    [Parameter]
    public FloatLabel FloatLabel { get; set; } = FloatLabel.AsUserTypes;

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public bool HasFocus { get; set; }

    internal ElementReference OverlayOrigin;

    private string _placeHolder { get; set; }

    private string _appearanceClass { get; set; }

    private string _formFieldClass =>
                new CssBuilder("mat-form-field")
                    .AddClass("mat-form-field-type-mat-input", true)
                    .AddClass("mat-form-field-appearance-fill", Appearance == Appearance.Fill)
                    .AddClass("mat-form-field-appearance-standard", Appearance == Appearance.Standard)
                    .AddClass("mat-form-field-appearance-legacy", Appearance == Appearance.Legacy)
                    .AddClass("mat-form-field-can-float", CanLabelFloat())
                    .AddClass("mat-form-field-should-float", ShouldLabelFloat())
                    .AddClass("mat-form-field-has-label", true)
                    .AddClass("mat-form-field-hide-placeholder", HasFocus == false)
                    .AddClass("mat-form-field-disabled", Disabled)
                    .AddClass("mat-focused", HasFocus == true)
                .Build();

    private string _formFieldLabelClass =>
                new CssBuilder("mat-form-field-label")
                    .AddClass("mat-form-field-empty", string.IsNullOrEmpty(CurrentValue))
                .Build();

    private bool CanLabelFloat()
    {
        return FloatLabel != FloatLabel.Never;
    }

    private bool ShouldLabelFloat()
    {
        return (HasFocus == true && FloatLabel == FloatLabel.AsUserTypes) || FloatLabel == FloatLabel.Always;
    }
}
